/*
Copyright Â© 2021 SonicWall, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/sonicwall-kubernetes/sonicwall-network-policy/pkg/apis/sonicwallnetworkpolicy/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SonicwallNetworkPolicyLister helps list SonicwallNetworkPolicies.
// All objects returned here must be treated as read-only.
type SonicwallNetworkPolicyLister interface {
	// List lists all SonicwallNetworkPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SonicwallNetworkPolicy, err error)
	// SonicwallNetworkPolicies returns an object that can list and get SonicwallNetworkPolicies.
	SonicwallNetworkPolicies(namespace string) SonicwallNetworkPolicyNamespaceLister
	SonicwallNetworkPolicyListerExpansion
}

// sonicwallNetworkPolicyLister implements the SonicwallNetworkPolicyLister interface.
type sonicwallNetworkPolicyLister struct {
	indexer cache.Indexer
}

// NewSonicwallNetworkPolicyLister returns a new SonicwallNetworkPolicyLister.
func NewSonicwallNetworkPolicyLister(indexer cache.Indexer) SonicwallNetworkPolicyLister {
	return &sonicwallNetworkPolicyLister{indexer: indexer}
}

// List lists all SonicwallNetworkPolicies in the indexer.
func (s *sonicwallNetworkPolicyLister) List(selector labels.Selector) (ret []*v1alpha1.SonicwallNetworkPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SonicwallNetworkPolicy))
	})
	return ret, err
}

// SonicwallNetworkPolicies returns an object that can list and get SonicwallNetworkPolicies.
func (s *sonicwallNetworkPolicyLister) SonicwallNetworkPolicies(namespace string) SonicwallNetworkPolicyNamespaceLister {
	return sonicwallNetworkPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SonicwallNetworkPolicyNamespaceLister helps list and get SonicwallNetworkPolicies.
// All objects returned here must be treated as read-only.
type SonicwallNetworkPolicyNamespaceLister interface {
	// List lists all SonicwallNetworkPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SonicwallNetworkPolicy, err error)
	// Get retrieves the SonicwallNetworkPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SonicwallNetworkPolicy, error)
	SonicwallNetworkPolicyNamespaceListerExpansion
}

// sonicwallNetworkPolicyNamespaceLister implements the SonicwallNetworkPolicyNamespaceLister
// interface.
type sonicwallNetworkPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SonicwallNetworkPolicies in the indexer for a given namespace.
func (s sonicwallNetworkPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SonicwallNetworkPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SonicwallNetworkPolicy))
	})
	return ret, err
}

// Get retrieves the SonicwallNetworkPolicy from the indexer for a given namespace and name.
func (s sonicwallNetworkPolicyNamespaceLister) Get(name string) (*v1alpha1.SonicwallNetworkPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sonicwallnetworkpolicy"), name)
	}
	return obj.(*v1alpha1.SonicwallNetworkPolicy), nil
}
